{
  "uid" : "ec731f10060260c6",
  "name" : "test_if_main_page_loads",
  "fullName" : "tests.test_dummy#test_if_main_page_loads",
  "historyId" : "d0e972bd941169d23f3754fde5d4e4a0",
  "time" : {
    "start" : 1652785648315,
    "stop" : 1652785776236,
    "duration" : 127921
  },
  "description" : "\n    Wait for docker container to load\n    ",
  "descriptionHtml" : "<pre><code>Wait for docker container to load\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "def test_if_main_page_loads():\n        \"\"\"\n        Wait for docker container to load\n        \"\"\"\n        with allure.step(f\"open conduit and take screenshot after main page loaded\"):\n            try:\n                driver = webdriver.Chrome(\n                    ChromeDriverManager().install(), options=chrome_options\n                )\n                driver.get(URL)\n>               element = WebDriverWait(driver, timeout=120, poll_frequency=5, ignored_exceptions=[TimeoutException]).until(\n                    EC.presence_of_element_located((By.CLASS_NAME, \"logo-font\"))\n                )\n\ntests/test_dummy.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2d54074516101972c6ae7fc5df0e13bf\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7fd3b31a8460>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n    Wait for docker container to load\n    ",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "def test_if_main_page_loads():\n        \"\"\"\n        Wait for docker container to load\n        \"\"\"\n        with allure.step(f\"open conduit and take screenshot after main page loaded\"):\n            try:\n                driver = webdriver.Chrome(\n                    ChromeDriverManager().install(), options=chrome_options\n                )\n                driver.get(URL)\n>               element = WebDriverWait(driver, timeout=120, poll_frequency=5, ignored_exceptions=[TimeoutException]).until(\n                    EC.presence_of_element_located((By.CLASS_NAME, \"logo-font\"))\n                )\n\ntests/test_dummy.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2d54074516101972c6ae7fc5df0e13bf\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7fd3b31a8460>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
    "steps" : [ {
      "name" : "open conduit and take screenshot after main page loaded",
      "time" : {
        "start" : 1652785648315,
        "stop" : 1652785776235,
        "duration" : 127920
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
      "statusTrace" : "  File \"/home/runner/work/conduit/conduit/tests/test_dummy.py\", line 35, in test_if_main_page_loads\n    element = WebDriverWait(driver, timeout=120, poll_frequency=5, ignored_exceptions=[TimeoutException]).until(\n  File \"/home/runner/.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/support/wait.py\", line 80, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "ec905cb0100ba239",
      "name" : "log",
      "source" : "ec905cb0100ba239.txt",
      "type" : "text/plain",
      "size" : 599
    }, {
      "uid" : "4316d339282984c5",
      "name" : "stderr",
      "source" : "4316d339282984c5.txt",
      "type" : "text/plain",
      "size" : 418
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_dummy"
  }, {
    "name" : "host",
    "value" : "fv-az180-930"
  }, {
    "name" : "thread",
    "value" : "3192-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_dummy"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 5,
        "skipped" : 0,
        "passed" : 5,
        "unknown" : 0,
        "total" : 10
      },
      "items" : [ {
        "uid" : "e7e73f737f4bece0",
        "reportUrl" : "https://eff917.github.io/conduit/30//#testresult/e7e73f737f4bece0",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message:",
        "time" : {
          "start" : 1652784580945,
          "stop" : 1652784703442,
          "duration" : 122497
        }
      }, {
        "uid" : "2cf16fe82b30990a",
        "reportUrl" : "https://eff917.github.io/conduit/30//#testresult/2cf16fe82b30990a",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message:",
        "time" : {
          "start" : 1652778661996,
          "stop" : 1652778784872,
          "duration" : 122876
        }
      }, {
        "uid" : "425b968aab964fb8",
        "reportUrl" : "https://eff917.github.io/conduit/29//#testresult/425b968aab964fb8",
        "status" : "passed",
        "time" : {
          "start" : 1652778388443,
          "stop" : 1652778390887,
          "duration" : 2444
        }
      }, {
        "uid" : "9a5a152ddf2548e9",
        "reportUrl" : "https://eff917.github.io/conduit/28//#testresult/9a5a152ddf2548e9",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message:",
        "time" : {
          "start" : 1652745428229,
          "stop" : 1652745551197,
          "duration" : 122968
        }
      }, {
        "uid" : "7a94fe3e6e4837d5",
        "reportUrl" : "https://eff917.github.io/conduit/27//#testresult/7a94fe3e6e4837d5",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message:",
        "time" : {
          "start" : 1652741071728,
          "stop" : 1652741144359,
          "duration" : 72631
        }
      }, {
        "uid" : "1b48af29bbb33fe4",
        "reportUrl" : "https://eff917.github.io/conduit/25//#testresult/1b48af29bbb33fe4",
        "status" : "passed",
        "time" : {
          "start" : 1652739880580,
          "stop" : 1652739953054,
          "duration" : 72474
        }
      }, {
        "uid" : "e028412bd2c60bea",
        "reportUrl" : "https://eff917.github.io/conduit/24//#testresult/e028412bd2c60bea",
        "status" : "passed",
        "time" : {
          "start" : 1652739048162,
          "stop" : 1652739090736,
          "duration" : 42574
        }
      }, {
        "uid" : "28519f48adef800f",
        "reportUrl" : "https://eff917.github.io/conduit/23//#testresult/28519f48adef800f",
        "status" : "passed",
        "time" : {
          "start" : 1652737381913,
          "stop" : 1652737414341,
          "duration" : 32428
        }
      }, {
        "uid" : "fc12d555d70b2b29",
        "reportUrl" : "https://eff917.github.io/conduit/22//#testresult/fc12d555d70b2b29",
        "status" : "passed",
        "time" : {
          "start" : 1652736734862,
          "stop" : 1652736736937,
          "duration" : 2075
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "ec731f10060260c6.json",
  "parameterValues" : [ ]
}