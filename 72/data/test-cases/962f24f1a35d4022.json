{"uid":"962f24f1a35d4022","name":"test_valid_login","fullName":"tests.test_04_login#test_valid_login","historyId":"da77767bd372b5b7bcea41a7529859f1","time":{"start":1656501021121,"stop":1656501021121,"duration":0},"status":"broken","statusMessage":"TypeError: __init__() takes from 1 to 2 positional arguments but 3 were given - maybe you meant pytest.mark.skipif?","statusTrace":"cls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_runtest_hook.<locals>.<lambda> at 0x7f0dece09ca0>\nwhen = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/_pytest/runner.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/_pytest/runner.py:259: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/pluggy/_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/pluggy/_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/_pytest/skipping.py:236: in pytest_runtest_setup\n    skipped = evaluate_skip_marks(item)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nitem = <Function test_valid_login>\n\n    def evaluate_skip_marks(item: Item) -> Optional[Skip]:\n        \"\"\"Evaluate skip and skipif marks on item, returning Skip if triggered.\"\"\"\n        for mark in item.iter_markers(name=\"skipif\"):\n            if \"condition\" not in mark.kwargs:\n                conditions = mark.args\n            else:\n                conditions = (mark.kwargs[\"condition\"],)\n    \n            # Unconditional.\n            if not conditions:\n                reason = mark.kwargs.get(\"reason\", \"\")\n                return Skip(reason)\n    \n            # If any of the conditions are true.\n            for condition in conditions:\n                result, reason = evaluate_condition(item, mark, condition)\n                if result:\n                    return Skip(reason)\n    \n        for mark in item.iter_markers(name=\"skip\"):\n            try:\n                return Skip(*mark.args, **mark.kwargs)\n            except TypeError as e:\n>               raise TypeError(str(e) + \" - maybe you meant pytest.mark.skipif?\") from None\nE               TypeError: __init__() takes from 1 to 2 positional arguments but 3 were given - maybe you meant pytest.mark.skipif?\n\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/_pytest/skipping.py:190: TypeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"tag","value":"@pytest.mark.skip(<function driver at 0x7f0decce8040>, <function create_user at 0x7f0decb88280>)"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_04_login"},{"name":"host","value":"fv-az426-314"},{"name":"thread","value":"3774-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_04_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"12356127804fe50d","reportUrl":"https://eff917.github.io/conduit/69//#testresult/12356127804fe50d","status":"passed","time":{"start":1655218995882,"stop":1655218995882,"duration":0}}]},"tags":["@pytest.mark.skip(<function driver at 0x7f0decce8040>, <function create_user at 0x7f0decb88280>)"]},"source":"962f24f1a35d4022.json","parameterValues":[]}