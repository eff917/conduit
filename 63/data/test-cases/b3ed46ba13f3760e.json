{"uid":"b3ed46ba13f3760e","name":"test_invalid_login[Invalid password]","fullName":"tests.test_02_login#test_invalid_login","historyId":"b7630b443ca421fb29a5f582652d6f57","time":{"start":1655205858780,"stop":1655205860877,"duration":2097},"description":"\n    Test invalid login\n    ","descriptionHtml":"<pre><code>Test invalid login\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=102.0.5005.61)","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0e197a94ea2e8574eb0b2d872964533d\")>\nemail = 'testuser1@example.com', password = 'asdf'\nexpected_message = 'Invalid user credentials.'\n\n    @pytest.mark.parametrize(\n        \"email, password, expected_message\",\n        [\n            (\"\", \"\", \"Email field required.\"),\n            (\"\", \"asdf\", \"Email field required.\"),\n            (\"testuser1@example.com\", \"\", \"Password field required.\"),\n            (\"testuser1@example.com\", \"asdf\", \"Invalid user credentials.\"),\n            (\"invalidmail\", \"Userpass1\", \"Email must be a valid email.\"),\n            (\"user32@hotmail.com\", \"Userpass1\", \"Invalid user credentials.\"),\n        ],\n        ids=[\n            \"Empty fields\",\n            \"Empty email\",\n            \"Empty password\",\n            \"Invalid password\",\n            \"Invalid email format\",\n            \"Not registered email\"\n        ]\n    )\n    def test_invalid_login(driver, email, password, expected_message):\n        \"\"\"\n        Test invalid login\n        \"\"\"\n        with allure.step(f\"test login\"):\n            driver.get(URL)\n            login_link = driver.find_element_by_xpath('//a[@href=\"#/login\"]')\n            login_link.click()\n            take_screenshot(driver, \"login_page\")\n            login_email_field = driver.find_element_by_xpath('//input[@placeholder=\"Email\"]')\n            login_password_field = driver.find_element_by_xpath('//input[@placeholder=\"Password\"]')\n            login_button = driver.find_element_by_xpath('//button[contains(text(), \"Sign in\")]')\n            login_email_field.send_keys(email)\n            login_password_field.send_keys(password)\n            take_screenshot(driver, \"login_page_after_fill\")\n            login_button.click()\n            # sleep one second to wait for animation to end\n            sleep(1)\n            take_screenshot(driver, \"after_login\")\n            error_message = driver.find_element_by_xpath('//div[@class=\"swal-text\"]')\n>           assert error_message.text == expected_message\n\ntests/test_02_login.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:76: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f678e45d7f0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...\\\\n#19 0x55ad5e582788 \\\\u003Cunknown>\\\\n#20 0x55ad5e59cf1d \\\\u003Cunknown>\\\\n#21 0x7f34e6dea609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=102.0.5005.61)\n\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1655205850973,"stop":1655205852242,"duration":1269},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"\n    Test invalid login\n    ","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=102.0.5005.61)","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0e197a94ea2e8574eb0b2d872964533d\")>\nemail = 'testuser1@example.com', password = 'asdf'\nexpected_message = 'Invalid user credentials.'\n\n    @pytest.mark.parametrize(\n        \"email, password, expected_message\",\n        [\n            (\"\", \"\", \"Email field required.\"),\n            (\"\", \"asdf\", \"Email field required.\"),\n            (\"testuser1@example.com\", \"\", \"Password field required.\"),\n            (\"testuser1@example.com\", \"asdf\", \"Invalid user credentials.\"),\n            (\"invalidmail\", \"Userpass1\", \"Email must be a valid email.\"),\n            (\"user32@hotmail.com\", \"Userpass1\", \"Invalid user credentials.\"),\n        ],\n        ids=[\n            \"Empty fields\",\n            \"Empty email\",\n            \"Empty password\",\n            \"Invalid password\",\n            \"Invalid email format\",\n            \"Not registered email\"\n        ]\n    )\n    def test_invalid_login(driver, email, password, expected_message):\n        \"\"\"\n        Test invalid login\n        \"\"\"\n        with allure.step(f\"test login\"):\n            driver.get(URL)\n            login_link = driver.find_element_by_xpath('//a[@href=\"#/login\"]')\n            login_link.click()\n            take_screenshot(driver, \"login_page\")\n            login_email_field = driver.find_element_by_xpath('//input[@placeholder=\"Email\"]')\n            login_password_field = driver.find_element_by_xpath('//input[@placeholder=\"Password\"]')\n            login_button = driver.find_element_by_xpath('//button[contains(text(), \"Sign in\")]')\n            login_email_field.send_keys(email)\n            login_password_field.send_keys(password)\n            take_screenshot(driver, \"login_page_after_fill\")\n            login_button.click()\n            # sleep one second to wait for animation to end\n            sleep(1)\n            take_screenshot(driver, \"after_login\")\n            error_message = driver.find_element_by_xpath('//div[@class=\"swal-text\"]')\n>           assert error_message.text == expected_message\n\ntests/test_02_login.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:76: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f678e45d7f0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...\\\\n#19 0x55ad5e582788 \\\\u003Cunknown>\\\\n#20 0x55ad5e59cf1d \\\\u003Cunknown>\\\\n#21 0x7f34e6dea609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=102.0.5005.61)\n\n../../../.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: StaleElementReferenceException","steps":[{"name":"test login","time":{"start":1655205858781,"stop":1655205860876,"duration":2095},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=102.0.5005.61)\n\n","statusTrace":"  File \"/home/runner/work/conduit/conduit/tests/test_02_login.py\", line 52, in test_invalid_login\n    assert error_message.text == expected_message\n  File \"/home/runner/.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py\", line 76, in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n  File \"/home/runner/.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/conduit-vizsgaremek-automated_testing-Cm8RP3R7-py3.10/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[{"uid":"8eda6ac92418329b","name":"login_page","source":"8eda6ac92418329b.png","type":"image/png","size":35486},{"uid":"c0e449a7fe91e15","name":"login_page_after_fill","source":"c0e449a7fe91e15.png","type":"image/png","size":36829},{"uid":"90de66b7b79e77c0","name":"after_login","source":"90de66b7b79e77c0.png","type":"image/png","size":40203}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1655205865182,"stop":1655205865240,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_02_login"},{"name":"host","value":"fv-az241-805"},{"name":"thread","value":"3221-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_02_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"email","value":"'testuser1@example.com'"},{"name":"expected_message","value":"'Invalid user credentials.'"},{"name":"password","value":"'asdf'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b3ed46ba13f3760e.json","parameterValues":["'testuser1@example.com'","'Invalid user credentials.'","'asdf'"]}